import host.file
import host.directory
import encoding.json
import encoding.base64

// This files generates the stub.toit file.
// Input should be the path to the esptool json files with stubs: repo=https://github.com/espressif/esptool/, dir=esptool/targets/stub_flasher
main args:
  json_file_dir := args[0]
  stream := directory.DirectoryStream json_file_dir

  stub := file.Stream.for_write "../src/stubs_data.toit"
  stub.write "import .stub\n\n"
  stub.write "// Auto generated file. Generated by gen/stub_gen.tot\n\n"
  chips := []
  while json_file := stream.next:
    if json_file.ends_with "json":
      m/Map := json.decode (file.read_content "$json_file_dir/$json_file")
      //print "$json_file : $m"
      //print (json.encode m).to_string_non_throwing
      chip_name/string := "ESP"+json_file[(json_file.index_of --last "_")+1..(json_file.index_of --last ".")].to_ascii_upper
      if chip_name.contains "BETA": continue


      stub.write "$(chip_name)_STUB ::= Stub\n".to_byte_array
      stub.write "    --chip_name=\"$chip_name\"\n".to_byte_array
      stub.write "    --entry=$(m["entry"])\n".to_byte_array
      stub.write "    --text=$(dump_bin m["text"])\n".to_byte_array
      stub.write "    --text_start=$(m["text_start"])\n".to_byte_array
      stub.write "    --data=$(dump_bin m["data"])\n".to_byte_array
      stub.write "    --data_start=$(m["data_start"])\n\n".to_byte_array
      print chip_name
      chips.add "$(chip_name)_STUB"

  stub.write "ALL_STUBS ::= $chips\n\n"
  stub.close

dump_bin encoded:
  decoded := base64.decode encoded
  if decoded.size < 15: return dump_small_bin decoded
  else: return dump_big_bin decoded

dump_big_bin decoded:
  indent := "        "
  res/string := "#[\n$indent"
  List.chunk_up 0 decoded.size 15 : | from to chunk_size |
    decoded[from..to].do: res += "0x$(%02x it), "
    if to == decoded.size:
      res=res[0..(res.size-2)]
    else:
      res += "\n$indent"
  return res + "]"

dump_small_bin decoded:
  res := "#["
  decoded.do: res += "0x$(%02x it), "
  res=res[0..(res.size-2)]

  return res + "]"

